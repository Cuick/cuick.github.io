<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>String on K&#39;s blog!</title>
    <link>http://cuick.github.io/tags/string/</link>
    <description>Recent content in String on K&#39;s blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Apr 2016 09:55:49 +0800</lastBuildDate>
    <atom:link href="http://cuick.github.io/tags/string/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>python基础-字符串和编码</title>
      <link>http://cuick.github.io/python/105_string/</link>
      <pubDate>Thu, 07 Apr 2016 09:55:49 +0800</pubDate>
      
      <guid>http://cuick.github.io/python/105_string/</guid>
      <description>

&lt;h2 id=&#34;字符串:a23880f8b35e46659c516e699a542eed&#34;&gt;字符串&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;字符串是以单引号&lt;code&gt;&#39;&lt;/code&gt;或双引号&lt;code&gt;&amp;quot;&lt;/code&gt;括起来的任意文本，比如&lt;code&gt;&#39;abc&#39;&lt;/code&gt;，&lt;code&gt;&amp;quot;xyz&amp;quot;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果字符串内部既包含&lt;code&gt;&#39;&lt;/code&gt;又包含&lt;code&gt;&amp;quot;&lt;/code&gt;怎么办？可以用转义字符\来标识&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;I\&#39;m \&amp;quot;OK\&amp;quot;!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I&#39;m &amp;quot;OK&amp;quot;!
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;转义字符\可以转义很多字符，比如&lt;code&gt;\n&lt;/code&gt;表示换行，&lt;code&gt;\t&lt;/code&gt;表示制表符，字符\本身也要转义，所以&lt;code&gt;\\&lt;/code&gt;表示的字符就是\，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;\\\t\\&#39;)
\       \
&amp;gt;&amp;gt;&amp;gt; print(r&#39;\\\t\\&#39;)
\\\t\\
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用&lt;code&gt;&#39;&#39;&#39;...&#39;&#39;&#39;&lt;/code&gt;的格式表示多行内容&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多行字符串&lt;code&gt;&#39;&#39;&#39;...&#39;&#39;&#39;&lt;/code&gt;还可以在前面加上r使用&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;编码:a23880f8b35e46659c516e699a542eed&#34;&gt;编码&lt;/h2&gt;

&lt;h4 id=&#34;ascii-unicode和utf-8的关系:a23880f8b35e46659c516e699a542eed&#34;&gt;ASCII、Unicode和UTF-8的关系&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。&lt;/li&gt;
&lt;li&gt;处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去,日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里,
各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。&lt;/li&gt;
&lt;li&gt;Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。
字母A用ASCII编码是十进制的65，二进制的01000001；&lt;/p&gt;

&lt;p&gt;字符0用ASCII编码是十进制的48，二进制的00110000，注意字符&amp;rsquo;0&amp;rsquo;和整数0是不同的；&lt;/p&gt;

&lt;p&gt;汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unicode编码转化为“可变长编码”的UTF-8编码。
UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;计算机系统通用的字符编码工作方式:a23880f8b35e46659c516e699a542eed&#34;&gt;计算机系统通用的字符编码工作方式&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。&lt;/li&gt;
&lt;li&gt;用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件&lt;/li&gt;
&lt;li&gt;浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;python字符串-python2-7:a23880f8b35e46659c516e699a542eed&#34;&gt;python字符串(python2.7)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python只支持ASCII编码&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Python在后来添加了对Unicode的支持，以Unicode表示的字符串用u&amp;rsquo;&amp;hellip;&amp;lsquo;表示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print u&#39;中文&#39;
中文
&amp;gt;&amp;gt;&amp;gt; u&#39;中&#39;
u&#39;\u4e2d
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字符串&amp;rsquo;xxx&amp;rsquo;虽然是ASCII编码，但也可以看成是UTF-8编码，而u&amp;rsquo;xxx&amp;rsquo;则只能是Unicode编码。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;把u&amp;rsquo;xxx&amp;rsquo;转换为UTF-8编码的&amp;rsquo;xxx&amp;rsquo;用encode(&amp;lsquo;utf-8&amp;rsquo;)方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; u&#39;ABC&#39;.encode(&#39;utf-8&#39;)
&#39;ABC&#39;
&amp;gt;&amp;gt;&amp;gt; u&#39;中文&#39;.encode(&#39;utf-8&#39;)
&#39;\xe4\xb8\xad\xe6\x96\x87&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由unicode转化为指定的编码用encode。由指定编码 解码为 unicode 用decode&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;英文字符转换后表示的UTF-8的值和Unicode值相等（但占用的存储空间不同），而中文字符转换后1个Unicode字符将变为3个UTF-8字符，\xe4就是其中一个字节，因为它的值是228，没有对应的字母可以显示，所以以十六进制显示字节的数值。len()函数可以返回字符串的长度&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；&lt;/p&gt;

&lt;p&gt;第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;python3字符串是以Unicode编码的&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;格式化:a23880f8b35e46659c516e699a542eed&#34;&gt;格式化&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;采用的格式化方式和C语言是一致的，用%实现&lt;/li&gt;
&lt;li&gt;有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;常见的占位符有：&lt;/p&gt;

&lt;p&gt;%d  整数
%f  浮点数
%s  字符串
%x  十六进制整数&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;格式化整数和浮点数还可以指定是否补0和整数与小数的位数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#39;%2d-%02d&#39; % (3, 1)
&#39; 3-01&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;%.2f&#39; % 3.1415926
&#39;3.14&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于Unicode字符串，用法完全一样，但最好确保替换的字符串也是Unicode字符串&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; u&#39;Hi, %s&#39; % u&#39;Michael&#39;
u&#39;Hi, Michael&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字符串里面的%是一个普通字符的时候就需要转义，用%%来表示一个%&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; &#39;growth rate: %d %%&#39; % 7
&#39;growth rate: 7 %&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Python当然也支持其他编码方式，比如把Unicode编码成GB2312&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; u&#39;中文&#39;.encode(&#39;gb2312&#39;)
&#39;\xd6\xd0\xce\xc4&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有特殊业务要求，请牢记仅使用Unicode和UTF-8这两种编码方式&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Python 3.x版本中，把&amp;rsquo;xxx&amp;rsquo;和u&amp;rsquo;xxx&amp;rsquo;统一成Unicode编码，即写不写前缀u都是一样的&lt;/p&gt;

&lt;p&gt;由于Python3.x的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。&lt;/p&gt;

&lt;p&gt;Python3.x对bytes类型的数据用带b前缀的单引号或双引号表示：b&amp;rsquo;xxx&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>