<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pythonptah on K&#39;s blog!</title>
    <link>http://cuick.github.io/tags/pythonptah/</link>
    <description>Recent content in Pythonptah on K&#39;s blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Apr 2016 15:07:49 +0800</lastBuildDate>
    <atom:link href="http://cuick.github.io/tags/pythonptah/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>python基础-模块</title>
      <link>http://cuick.github.io/python/111_module/</link>
      <pubDate>Wed, 13 Apr 2016 15:07:49 +0800</pubDate>
      
      <guid>http://cuick.github.io/python/111_module/</guid>
      <description>

&lt;h2 id=&#34;包:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;包&lt;/h2&gt;

&lt;p&gt;避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package1
├─ __init__.py
├── admin.py
├── models.py
├── tests.py
└─ views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一个包目录下面都会有一个&lt;strong&gt;init&lt;/strong&gt;.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。&lt;strong&gt;init&lt;/strong&gt;.py可以是空文件，也可以有Python代码，因为&lt;strong&gt;init&lt;/strong&gt;.py本身就是一个模块，而它的模块名就是mycompany&lt;/p&gt;

&lt;p&gt;可以有多级目录，组成多级层次的包结构。&lt;/p&gt;

&lt;h2 id=&#34;模块:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;模块&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;在Python中，一个.py文件就称之为一个模块（Module）。

#!/usr/bin/env python
# -*- coding: utf-8 -*-

&#39; a test module &#39;

__author__ = &#39;Michael Liao&#39;

import sys

def test():
    args = sys.argv
    if len(args)==1:
        print &#39;Hello, world!&#39;
    elif len(args)==2:
        print &#39;Hello, %s!&#39; % args[1]
    else:
        print &#39;Too many arguments!&#39;

if __name__==&#39;__main__&#39;:
    test()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量&lt;strong&gt;name&lt;/strong&gt;置为&lt;strong&gt;main&lt;/strong&gt;，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。&lt;/p&gt;

&lt;h2 id=&#34;使用模块:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;使用模块&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import sys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入sys模块后，我们就有了变量sys指向该模块，利用sys这个变量，就可以访问sys模块的所有功能&lt;/p&gt;

&lt;h3 id=&#34;别名:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;别名&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;try:
    import cStringIO as StringIO
except ImportError: # 导入失败会捕获到ImportError
    import StringIO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于Python是动态语言，函数签名一致接口就一样，因此，无论导入哪个模块后续代码都能正常工作&lt;/p&gt;

&lt;h2 id=&#34;第三方模块:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;第三方模块&lt;/h2&gt;

&lt;h3 id=&#34;安装:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;Python有两个封装了setuptools的包管理工具：easy_install和pip。&lt;/p&gt;

&lt;h3 id=&#34;模块搜索路径:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;模块搜索路径&lt;/h3&gt;

&lt;p&gt;当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错&lt;/p&gt;

&lt;p&gt;Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中&lt;/p&gt;

&lt;h3 id=&#34;添加自己的搜索目录:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;添加自己的搜索目录&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一：直接修改sys.path，添加要搜索的目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.path.append(&#39;/Users/michael/my_py_scripts&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法二：设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;future:2e443d841f9bf0a6e5f9c1a9e8bdae98&#34;&gt;future&lt;/h3&gt;

&lt;p&gt;Python提供了&lt;strong&gt;future&lt;/strong&gt;模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性。&lt;/p&gt;

&lt;p&gt;果你想在Python 2.7的代码中直接使用Python 3.x的除法，可以通过&lt;strong&gt;future&lt;/strong&gt;模块的division实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import division

print &#39;10 / 3 =&#39;, 10 / 3
print &#39;10.0 / 3 =&#39;, 10.0 / 3
print &#39;10 // 3 =&#39;, 10 // 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10 / 3 = 3.33333333333
10.0 / 3 = 3.33333333333
10 // 3 = 3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>