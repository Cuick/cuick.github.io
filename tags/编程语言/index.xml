<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程语言 on K&#39;s blog!</title>
    <link>http://cuick.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 编程语言 on K&#39;s blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Mar 2016 21:15:49 +0800</lastBuildDate>
    <atom:link href="http://cuick.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>线程安全与GIL</title>
      <link>http://cuick.github.io/python/102_gil/</link>
      <pubDate>Sat, 19 Mar 2016 21:15:49 +0800</pubDate>
      
      <guid>http://cuick.github.io/python/102_gil/</guid>
      <description>

&lt;h2 id=&#34;引入:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;引入&lt;/h2&gt;

&lt;p&gt;多核时代到来。为了更好利用多核，就要讲到进程与线程，区别在于是否共享资源，前者是独立的后这是共享的。&lt;br /&gt;
多线程环境最大的问题就是资源的竞争 死锁 数据修改。
于是就有了线程安全的问题。&lt;/p&gt;

&lt;h2 id=&#34;线程安全:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;线程安全&lt;/h2&gt;

&lt;p&gt;在多线程的环境下, 线程安全能够保证多个线程同时执行时程序依旧运行正确, 而且要保证对于共享的数据,可以由多个线程存取,但是同一时刻只能有一个线程进行存取.&lt;/p&gt;

&lt;p&gt;加锁可以保证存取操作的唯一性, 从而保证同一时刻只有一个线程对共享数据存取.&lt;/p&gt;

&lt;p&gt;通常加锁也有2种不同的粒度的锁:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fine-grained(所谓的细粒度), 那么程序员需要自行地加,解锁来保证线程安全&lt;/li&gt;
&lt;li&gt;coarse-grained(所谓的粗粒度), 那么语言层面本身维护着一个全局的锁机制,用来保证线程安全&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前一种方式比较典型的是 java, Jython 等, 后一种方式比较典型的是 CPython (即Python).&lt;/p&gt;

&lt;p&gt;Python中的全局锁机制,便是 GIL (Global Interpreter Lock)&lt;/p&gt;

&lt;h2 id=&#34;什么是gil:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;什么是GIL&lt;/h2&gt;

&lt;p&gt;全局解释器锁（GIL）是一种互斥锁，由程序语言解析线程持有，用于避免代码共享可能导致的线程安全问题。在支持GIL的语言中，每一个解释器进程中都会含有一个GIL。&lt;/p&gt;

&lt;p&gt;每一个interpreter进程,只能同时仅有一个线程来执行, 获得相关的锁, 存取相关的资源.&lt;/p&gt;

&lt;p&gt;那么很容易就会发现,如果一个interpreter进程只能有一个线程来执行, 多线程的并发则成为不可能, 即使这几个线程之间不存在资源的竞争.&lt;/p&gt;

&lt;h4 id=&#34;gil应用:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;GIL应用&lt;/h4&gt;

&lt;p&gt;一些支持 GIL 的语言的实现包括 CPython（Python 语言最被广泛使用的一种实现），Ruby MRI（Ruby 的推荐实现，GIL 在 Ruby 中被称为 Global VM Lock）&lt;/p&gt;

&lt;p&gt;基于 JVM 的上述语言的等价实现（Jython 和 JRuby）不使用 GIL。IronPython 和 IronRuby 被实现成微软的动态语言运行时，并在其中避免使用 GIL 。&lt;/p&gt;

&lt;h4 id=&#34;关于gil的争议:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;关于GIL的争议&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;认为应该去除 GIL 的:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不顺应计算机的发展潮流(多核时代已经到来, 而 GIL 会很影响多核的使用)&lt;/li&gt;
&lt;li&gt;大幅度提升多线程程序的速度&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;认为不应该去除 GIL 的(如果去掉,会):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;写python的扩展(module)时会遇到锁的问题,程序员需要繁琐地加解锁来保证线程安全&lt;/li&gt;
&lt;li&gt;会较大幅度地减低单线程程序的速度&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;gil设计的缺陷:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;GIL设计的缺陷&lt;/h4&gt;

&lt;p&gt;基于pcode数量的调度方式&lt;/p&gt;

&lt;p&gt;按照Python社区的想法，操作系统本身的线程调度已经非常成熟稳定了，没有必要自己搞一套。所以Python的线程就是C语言的一个pthread，并通过操作系统调度算法进行调度（例如linux是CFS）。为了让各个线程能够平均利用CPU时间，python会计算当前已执行的微代码数量，达到一定阈值后就强制释放GIL。而这时也会触发一次操作系统的线程调度（当然是否真正进行上下文切换由操作系统自主决定）。&lt;/p&gt;

&lt;p&gt;伪代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while True:
    acquire GIL
    for i in 1000:
        do something
    release GIL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种模式在只有一个CPU核心的情况下毫无问题。任何一个线程被唤起时都能成功获得到GIL（因为只有释放了GIL才会引发线程调度）。但当CPU有多个核心的时候，问题就来了。从伪代码可以看到，从 release GIL 到 acquire GIL 之间几乎是没有间隙的。所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到GIL了。这个时候被唤醒执行的线程只能白白的浪费CPU时间，看着另一个线程拿着GIL欢快的执行着。然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。&lt;/p&gt;

&lt;p&gt;Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。&lt;/p&gt;

&lt;h4 id=&#34;解决办法:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;解决办法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用multiprocess替代Thread&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;multiprocess库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。&lt;/p&gt;

&lt;p&gt;当然multiprocess也不是万能良药。它的引入会增加程序实现时线程间数据通讯和同步的困难。就拿计数器来举例子，如果我们要多个线程累加同一个变量，对于thread来说，申明一个global变量，用thread.Lock的context包裹住三行就搞定了。而multiprocess由于进程之间无法看到对方的数据，只能通过在主线程申明一个Queue，put再get或者用share memory的方法。这个额外的实现成本使得本来就非常痛苦的多线程程序编码，变得更加痛苦了。具体难点在哪有兴趣的读者可以扩展阅读 这篇文章&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用其他解析器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前也提到了既然GIL只是CPython的产物，那么其他解析器是不是更好呢？没错，像JPython和IronPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助。然而由于用了Java/C#用于解析器实现，他们也失去了利用社区众多C语言模块有用特性的机会。所以这些解析器也因此一直都比较小众。毕竟功能和性能大家在初期都会选择前者， Done is better than perfect 。
所以没救了么？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;另一个改进 Reworking the GIL&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;将切换颗粒度从基于opcode计数改成基于时间片计数&lt;/li&gt;
&lt;li&gt;避免最近一次释放GIL锁的线程再次被立即调度&lt;/li&gt;
&lt;li&gt;新增线程优先级功能（高优先级线程可以迫使其他线程释放所持有的GIL锁）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;总结:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;Python GIL其实是功能和性能之间权衡后的产物，它尤其存在的合理性，也有较难改变的客观因素。从本分的分析中，我们可以做以下一些简单的总结：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为GIL的存在，只有IO Bound场景下得多线程会得到较好的性能&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果对并行计算性能较高的程序可以考虑把核心部分也成C模块，或者索性用其他语言实现&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GIL在较长一段时间内将会继续存在，但是会不断对其进行改进&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;参考文章:46f6c6eb85e710b6752b8fcd11e3d818&#34;&gt;参考文章：&lt;/h5&gt;

&lt;p&gt;1.&lt;a href=&#34;http://www.tuicool.com/articles/7zIra2r&#34;&gt;http://www.tuicool.com/articles/7zIra2r&lt;/a&gt;&lt;br /&gt;
2.&lt;a href=&#34;http://my.oschina.net/moooofly/blog/178531&#34;&gt;http://my.oschina.net/moooofly/blog/178531&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>闭包</title>
      <link>http://cuick.github.io/python/101_bibao/</link>
      <pubDate>Sat, 19 Mar 2016 20:24:49 +0800</pubDate>
      
      <guid>http://cuick.github.io/python/101_bibao/</guid>
      <description>&lt;p&gt;闭包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def make_addr(addend):
    def addr(augend):
        return augend + addend
    return addr

p = make_addr(23)
q = make_addr(42)

print p(10)
print q(10)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Markdown快速入门</title>
      <link>http://cuick.github.io/markdown/markdown_stu/</link>
      <pubDate>Thu, 03 Mar 2016 16:57:08 +0800</pubDate>
      
      <guid>http://cuick.github.io/markdown/markdown_stu/</guid>
      <description>

&lt;h1 id=&#34;教程地址:e4b8a5905536b2b2540aab2195e920f5&#34;&gt;教程地址&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;http://wowubuntu.com/markdown/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;因为本站就是用markdown编辑，所以，本文是从教程地址直接复制文章过来，然后以markdown的code方式显示出来， 直接在编辑文章处删除相关注释，就可查看例子效果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;段落、标题、区块代码

一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。

Markdown 支持两种标题的语法，Setext 和 atx 形式。Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。

区块引用则使用 email 形式的 &#39;&amp;gt;&#39; 角括号。

Markdown 语法:

A First Level Header
====================
A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog&#39;s back.
Header 3

&amp;gt; This is a blockquote.
&amp;gt;
&amp;gt;&amp;gt; This is the second paragraph in the blockquote.
&amp;gt;
&amp;gt; ## This is an H2 in a blockquote

输出 HTML 为：

&amp;lt;h1&amp;gt;A First Level Header&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;A Second Level Header&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The quick brown fox jumped over the lazy
dog&#39;s back.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Header 3&amp;lt;/h3&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;This is a blockquote.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is the second paragraph in the blockquote.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;This is an H2 in a blockquote&amp;lt;/h2&amp;gt;
&amp;lt;/blockquote&amp;gt;

修辞和强调

Markdown 使用星号和底线来标记需要强调的区段。

Markdown 语法:

Some of these words *are emphasized*.
Some of these words _are emphasized also_.
Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.

输出 HTML 为:

&amp;lt;p&amp;gt;Some of these words &amp;lt;em&amp;gt;are emphasized&amp;lt;/em&amp;gt;.
Some of these words &amp;lt;em&amp;gt;are emphasized also&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Use two asterisks for &amp;lt;strong&amp;gt;strong emphasis&amp;lt;/strong&amp;gt;.
Or, if you prefer, &amp;lt;strong&amp;gt;use two underscores instead&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;

列表

无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：

* Candy.
* Gum.
* Booze.

加号：

+ Candy.
+ Gum.
+ Booze.

和减号

- Candy.
- Gum.
- Booze.

都会输出 HTML 为：

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Candy.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Gum.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Booze.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

有序的列表则是使用一般的数字接着一个英文句点作为项目标记：

1. Red
2. Green
3. Blue

输出 HTML 为：

&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Red&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Blue&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;

如果你在项目之间插入空行，那项目的内容会用 &amp;lt;p&amp;gt; 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。

* A list item.

    With multiple paragraphs.

    * Another item in the list.

输出 HTML 为：

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;A list item.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With multiple paragraphs.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Another item in the list.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

链接

Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。

行内形式是直接在后面用括号直接接上链接：

This is an [example link](http://example.com/).

输出 HTML 为：

&amp;lt;p&amp;gt;This is an &amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt;
example link&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

你也可以选择性的加上 title 属性：

This is an [example link](http://example.com/ &amp;quot;With a Title&amp;quot;).

输出 HTML 为：

&amp;lt;p&amp;gt;This is an &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;With a Title&amp;quot;&amp;gt;
example link&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：

I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/ &amp;quot;Google&amp;quot;
[2]: http://search.yahoo.com/ &amp;quot;Yahoo Search&amp;quot;
[3]: http://search.msn.com/ &amp;quot;MSN Search&amp;quot;

输出 HTML 为：

&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&amp;quot;http://google.com/&amp;quot;
title=&amp;quot;Google&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from &amp;lt;a href=&amp;quot;http://search.yahoo.com/&amp;quot;
title=&amp;quot;Yahoo Search&amp;quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://search.msn.com/&amp;quot;
title=&amp;quot;MSN Search&amp;quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：

I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/

输出 HTML 为：

&amp;lt;p&amp;gt;I start my morning with a cup of coffee and
&amp;lt;a href=&amp;quot;http://www.nytimes.com/&amp;quot;&amp;gt;The New York Times&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

图片

图片的语法和链接很像。

行内形式（title 是选择性的）：

![alt text](/path/to/img.jpg &amp;quot;Title&amp;quot;)

参考形式：

![alt text][id]

[id]: /path/to/img.jpg &amp;quot;Title&amp;quot;

上面两种方法都会输出 HTML 为：

&amp;lt;img src=&amp;quot;/path/to/img.jpg&amp;quot; alt=&amp;quot;alt text&amp;quot; title=&amp;quot;Title&amp;quot; /&amp;gt;

代码

在一般的段落文字中，你可以使用反引号 \` 来标记代码区段，区段内的 &amp;amp;、&amp;lt; 和 &amp;gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：

I strongly recommend against using any `&amp;lt;blink&amp;gt;` tags.

I wish SmartyPants used named entities like `&amp;amp;mdash;`  
instead of decimal-encoded entites like `&amp;amp;#8212;`.

输出 HTML 为：

&amp;lt;p&amp;gt;I strongly recommend against using any
&amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I wish SmartyPants used named entities like
&amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt; instead of decimal-encoded
entites like &amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;

如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &amp;amp;、&amp;lt; 和 &amp;gt; 也一样会自动转成 HTML 实体。

Markdown 语法:

If you want your page to validate under XHTML 1.0 Strict,
you&#39;ve got to put paragraph tags in your blockquotes:

    &amp;lt;blockquote&amp;gt;
    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
    &amp;lt;/blockquote&amp;gt;

输出 HTML 为：

&amp;lt;p&amp;gt;If you want your page to validate under XHTML 1.0 Strict,
you&#39;ve got to put paragraph tags in your blockquotes:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;blockquote&amp;amp;gt;
&amp;amp;lt;p&amp;amp;gt;For example.&amp;amp;lt;/p&amp;amp;gt;
&amp;amp;lt;/blockquote&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>