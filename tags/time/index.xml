<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Time on K&#39;s blog!</title>
    <link>http://cuick.github.io/tags/time/</link>
    <description>Recent content in Time on K&#39;s blog!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Apr 2016 20:48:49 +0800</lastBuildDate>
    <atom:link href="http://cuick.github.io/tags/time/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>time计算日周月时间戳</title>
      <link>http://cuick.github.io/python/104_time/</link>
      <pubDate>Wed, 06 Apr 2016 20:48:49 +0800</pubDate>
      
      <guid>http://cuick.github.io/python/104_time/</guid>
      <description>&lt;p&gt;计算自然周第一天、自然月第一天和每天的凌晨时间戳&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time

def get_day_begin(ts = time.time(),N = 0):
&amp;quot;&amp;quot;&amp;quot;
N为0时获取时间戳ts当天的起始时间戳，N为负数时前数N天，N为正数是后数N天
&amp;quot;&amp;quot;&amp;quot;
 return int(time.mktime(time.strptime(time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(ts)),&#39;%Y-%m-%d&#39;))) + 86400*N

def get_week_begin(ts = time.time(),N = 0):
&amp;quot;&amp;quot;&amp;quot;
N为0时获取时间戳ts当周的开始时间戳，N为负数时前数N周，N为整数是后数N周，此函数将周一作为周的第一天
&amp;quot;&amp;quot;&amp;quot;
 w = int(time.strftime(&#39;%w&#39;,time.localtime(ts)))
 return get_day_begin(int(ts - (w-1)*86400)) + N*604800

def get_month_begin(ts = time.time(),N = 0):
&amp;quot;&amp;quot;&amp;quot;
N为0时获取时间戳ts当月的开始时间戳，N为负数前数N月，N为正数后数N月
&amp;quot;&amp;quot;&amp;quot;
 month_day = {1:31,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}
 cur_y,cur_m,cur_d = [int(x) for x in time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(ts)).split(&#39;-&#39;)]
 if (cur_y%4 == 0 and cur_y%100 != 0) or cur_y%400 == 0:
 month_day[2] = 29
else:
 month_day[2] = 28
 t = get_day_begin(ts) - (cur_d-1)*86400
 real_month = N + cur_m
 if real_month == cur_m:
 return t
 if N &amp;gt; 0:
 if real_month &amp;lt;= 12:
 for x in xrange(cur_m,real_month):
 t += month_day[x]*86400
 if real_month &amp;gt; 12:
 for x in xrange(cur_m,13):
 t += month_day[x]*86400
 t = get_month_begin(t,real_month - 13)
 if N &amp;lt; 0:
 if real_month &amp;gt;= 1:
 for x in xrange(real_month,cur_m):
 t -= month_day[x]*86400
 if real_month &amp;lt; 1:
 for x in xrange(1,cur_m):
 t -= month_day[x]*86400
 t -= month_day[12]*86400
 t = get_month_begin(t,real_month)
 return t

if __name__ ==&amp;quot;__main__&amp;quot;:
 t = time.time()
 print time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(get_day_begin(t,1)))
 print time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(get_week_begin(t,-2)))
 print time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(get_month_begin(t,-3)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>